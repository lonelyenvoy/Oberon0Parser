package oberon_grammar;

import java.io.IOException;

parser code
{:
    private Oberon0Lexer lexer;
    private File file;
    public Parser(File file) {
        this();
        this.file = file;
        try {
            lexer = new Oberon0Lexer(new FileReader(file));
        } catch (IOException exception) {
            throw new RuntimeException("Unable to open file \"" + file + "\"");
        }
    }
:}

scan with
{:
    return lexer.yylex();
:}


terminal MODULE, BEGIN, END, CONST, TYPE, VAR, PROCEDURE, ARRAY, OF, RECORD;
terminal WHILE, DO, IF, THEN, ELSIF, ELSE;
terminal SEMICOLON, COMMA;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD;
terminal AND, OR, NOT;
terminal EQUAL, NOT_EQUAL, LESS, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL;
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal ASSIGN;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, DOT, COLON;
terminal String IDENTIFIER;
terminal String INTEGER;

non terminal module;                        // ok
non terminal moduleBeginSection;            // ok
non terminal statementSequence;             // ok
non terminal declarations;                  // ok
non terminal constDeclaration;              // ok
non terminal constIdentifierDeclaration;    // ok
non terminal typeDeclaration;               // ok
non terminal typeIdentifierDeclaration;     // ok
non terminal varDeclaration;                // ok
non terminal varIdentifierDeclaration;      // ok
non terminal procedureDeclarations;         // ok
non terminal procedureDeclaration;          // ok
non terminal expression;
non terminal type;                          // ok
non terminal identifierList;                // ok
non terminal procedureHeading;              // ok
non terminal procedureBody;                 // ok
non terminal formalParameters;              // ok
non terminal procedureBodyBeginSection;     // ok
non terminal wrappedFormalParameters;       // ok
non terminal formalParameterSections;       // ok
non terminal formalParameterSection;        // ok
non terminal arrayType;                     // ok
non terminal recordType;                    // ok
non terminal fieldLists;                    // ok
non terminal fieldList;                     // ok
non terminal identifiers;                   // ok
non terminal statement;
non terminal statements;                    // ok
non terminal assignment;
non terminal procedureCall;
non terminal ifStatement;
non terminal whileStatement;


start with module;


module                      ::= MODULE IDENTIFIER:id1 SEMICOLON declarations
                                moduleBeginSection
                                END IDENTIFIER:id2
                                {:

                                :}
                            ;
moduleBeginSection          ::= BEGIN statementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
declarations                ::= constDeclaration
                                typeDeclaration
                                varDeclaration
                                procedureDeclarations
                                {:

                                :}
                            ;
constDeclaration            ::= CONST constIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
constIdentifierDeclaration  ::= IDENTIFIER EQUAL expression SEMICOLON constIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
typeDeclaration             ::= TYPE typeDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
typeIdentifierDeclaration   ::= IDENTIFIER EQUAL type SEMICOLON typeIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
varDeclaration              ::= VAR varIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
varIdentifierDeclaration    ::= identifierList COLON TYPE SEMICOLON varIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
procedureDeclarations       ::= procedureDeclaration SEMICOLON procedureDeclarations
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
procedureDeclaration        ::= procedureHeading SEMICOLON procedureBody
                                {:

                                :}
                            ;
procedureHeading            ::= PROCEDURE IDENTIFIER wrappedFormalParameters
                                {:

                                :}
                            ;
procedureBody               ::= declarations
                                procedureBodyBeginSection
                                END IDENTIFIER
                                {:

                                :}
                            ;
procedureBodyBeginSection   ::= BEGIN statementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
wrappedFormalParameters     ::= LEFT_ROUND_BRACKET formalParameters RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameters            ::= formalParameterSection formalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameterSections     ::= SEMICOLON formalParameterSection formalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameterSection      ::= identifierList COLON type
                                {:

                                :}
                            |   VAR identifierList COLON type
                                {:

                                :}
                            ;
type                        ::= IDENTIFIER
                                {:

                                :}
                            |   arrayType
                                {:

                                :}
                            |   recordType
                                {:

                                :}
                            ;
recordType                  ::= RECORD fieldList fieldLists END
                                {:

                                :}
                            ;
fieldLists                  ::= SEMICOLON fieldList fieldLists
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
fieldList                   ::= identifierList COLON type
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
arrayType                   ::= ARRAY expression OF type
                                {:

                                :}
                            ;
identifierList              ::= IDENTIFIER identifiers
                                {:

                                :}
                            ;
identifiers                 ::= COMMA IDENTIFIER identifiers
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
statementSequence           ::= statement statements
                                {:

                                :}
                            ;
statements                  ::= SEMICOLON statement statements
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
statement                   ::= assignment
                                {:

                                :}
                            |   procedureCall
                                {:

                                :}
                            |   ifStatement
                                {:

                                :}
                            |   whileStatement
                                {:

                                :}
                            |   statement
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;






