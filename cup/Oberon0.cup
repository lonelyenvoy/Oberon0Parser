package grammar;

import java.io.IOException;
import java.io.File;
import java.io.FileReader;

import java_cup.runtime.Symbol;

action code
{:

:};

parser code
{:
    private Lexer lexer;
    private File file;
    public Parser(File file) {
        this();
        this.file = file;
        try {
            lexer = new Lexer(new FileReader(file));
        } catch (IOException exception) {
            throw new RuntimeException("Unable to open file \"" + file + "\"");
        }
    }
:};

scan with
{:
    Symbol symbol = lexer.yylex();
    return symbol != null ? symbol : new Symbol(SymbolConstants.EOF);
:};


terminal MODULE, BEGIN, END, CONST, TYPE, VAR, PROCEDURE, ARRAY, OF, RECORD;
terminal WHILE, DO, IF, THEN, ELSIF, ELSE;
terminal SEMICOLON, COMMA;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD;
terminal AND, OR, NOT;
terminal EQUAL, NOT_EQUAL, LESS, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL;
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal ASSIGN;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, DOT, COLON;
terminal String IDENTIFIER;
terminal String INTEGER;

non terminal Module;                        // ok
non terminal ModuleBeginSection;            // ok
non terminal StatementSequence;             // ok
non terminal Declarations;                  // ok
non terminal ConstDeclaration;              // ok
non terminal ConstIdentifierDeclaration;    // ok
non terminal TypeDeclaration;               // ok
non terminal TypeIdentifierDeclaration;     // ok
non terminal VarDeclaration;                // ok
non terminal VarIdentifierDeclaration;      // ok
non terminal ProcedureDeclarations;         // ok
non terminal ProcedureDeclaration;          // ok
non terminal Expression;                    // ok
non terminal Type;                          // ok
non terminal IdentifierList;                // ok
non terminal ProcedureHeading;              // ok
non terminal ProcedureBody;                 // ok
non terminal FormalParameters;              // ok
non terminal ProcedureBodyBeginSection;     // ok
non terminal WrappedFormalParameters;       // ok
non terminal FormalParameterSections;       // ok
non terminal FormalParameterSection;        // ok
non terminal ArrayType;                     // ok
non terminal RecordType;                    // ok
non terminal FieldLists;                    // ok
non terminal FieldList;                     // ok
non terminal Identifiers;                   // ok
non terminal Statement;                     // ok
non terminal Statements;                    // ok
non terminal Assignment;                    // ok
non terminal ProcedureCall;                 // ok
non terminal IfStatement;                   // ok
non terminal WhileStatement;                // ok
non terminal ElseIfStatement;               // ok
non terminal ElseStatement;                 // ok
non terminal ActualParameters;              // ok
non terminal ExpressionList;                // ok
non terminal Expressions;                   // ok
non terminal Selector;                      // ok
non terminal SimpleExpression;              // ok
non terminal ComparingSimpleExpression;     // ok
non terminal ComparisonOperator;            // ok
non terminal Term;                          // ok
non terminal SpecifiedOperatorI;            // ok
non terminal TermSequence;                  // ok
non terminal SpecifiedOperatorII;           // ok
non terminal Factor;                        // ok
non terminal FactorSequence;                // ok
non terminal SpecifiedOperatorIII;          // ok
non terminal Number;                        // ok


start with Module;


Module                      ::= MODULE IDENTIFIER:id1 SEMICOLON Declarations
                                ModuleBeginSection
                                END IDENTIFIER:id2 DOT
                                {:

                                :}
                            ;
ModuleBeginSection          ::= BEGIN StatementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
Declarations                ::= ConstDeclaration
                                TypeDeclaration
                                VarDeclaration
                                ProcedureDeclarations
                                {:

                                :}
                            ;
ConstDeclaration            ::= CONST ConstIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ConstIdentifierDeclaration  ::= IDENTIFIER EQUAL Expression SEMICOLON ConstIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
TypeDeclaration             ::= TYPE TypeIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
TypeIdentifierDeclaration   ::= IDENTIFIER EQUAL Type SEMICOLON TypeIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
VarDeclaration              ::= VAR VarIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
VarIdentifierDeclaration    ::= IdentifierList COLON Type SEMICOLON VarIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ProcedureDeclarations       ::= ProcedureDeclaration SEMICOLON ProcedureDeclarations
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ProcedureDeclaration        ::= ProcedureHeading SEMICOLON ProcedureBody
                                {:

                                :}
                            ;
ProcedureHeading            ::= PROCEDURE IDENTIFIER WrappedFormalParameters
                                {:

                                :}
                            ;
ProcedureBody               ::= Declarations
                                ProcedureBodyBeginSection
                                END IDENTIFIER
                                {:

                                :}
                            ;
ProcedureBodyBeginSection   ::= BEGIN StatementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
WrappedFormalParameters     ::= LEFT_ROUND_BRACKET FormalParameters RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
FormalParameters            ::= FormalParameterSection FormalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
FormalParameterSections     ::= SEMICOLON FormalParameterSection FormalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
FormalParameterSection      ::= IdentifierList COLON Type
                                {:

                                :}
                            |   VAR IdentifierList COLON Type
                                {:

                                :}
                            ;
Type                        ::= IDENTIFIER
                                {:

                                :}
                            |   ArrayType
                                {:

                                :}
                            |   RecordType
                                {:

                                :}
                            ;
RecordType                  ::= RECORD FieldList FieldLists END
                                {:

                                :}
                            ;
FieldLists                  ::= SEMICOLON FieldList FieldLists
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
FieldList                   ::= IdentifierList COLON Type
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ArrayType                   ::= ARRAY Expression OF Type
                                {:

                                :}
                            ;
IdentifierList              ::= IDENTIFIER Identifiers
                                {:

                                :}
                            ;
Identifiers                 ::= COMMA IDENTIFIER Identifiers
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
StatementSequence           ::= Statement Statements
                                {:

                                :}
                            |   error Statements
                                {:

                                :}
                            ;
Statements                  ::= SEMICOLON Statement Statements
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
Statement                   ::= Assignment Statement
                                {:

                                :}
                            |   ProcedureCall Statement
                                {:

                                :}
                            |   IfStatement Statement
                                {:

                                :}
                            |   WhileStatement Statement
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
WhileStatement              ::= WHILE Expression DO StatementSequence END
                                {:

                                :}
                            ;
IfStatement                 ::= IF Expression THEN StatementSequence
                                ElseIfStatement
                                ElseStatement
                                END
                                {:

                                :}
                            ;
ElseIfStatement             ::= ELSIF Expression THEN StatementSequence ElseIfStatement
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ElseStatement               ::= ELSE StatementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ProcedureCall               ::= IDENTIFIER ActualParameters
                                {:

                                :}
                            ;
ActualParameters            ::= LEFT_ROUND_BRACKET ExpressionList RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ExpressionList              ::= Expression Expressions
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
Expressions                 ::= COMMA Expression Expressions
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
Assignment                  ::= IDENTIFIER Selector ASSIGN Expression
                                {:

                                :}
                            ;
Expression                  ::= SimpleExpression ComparingSimpleExpression
                                {:

                                :}
                            ;
ComparingSimpleExpression   ::= ComparisonOperator SimpleExpression
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
ComparisonOperator          ::= EQUAL
                                {:

                                :}
                            |   NOT_EQUAL
                                {:

                                :}
                            |   LESS
                                {:

                                :}
                            |   LESS_OR_EQUAL
                                {:

                                :}
                            |   GREATER
                                {:

                                :}
                            |   GREATER_OR_EQUAL
                                {:

                                :}
                            ;
SimpleExpression            ::= SpecifiedOperatorI Term TermSequence
                                {:

                                :}
                            ;
TermSequence                ::= SpecifiedOperatorII Term TermSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
SpecifiedOperatorI          ::= ADD
                                {:

                                :}
                            |   SUBTRACT
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
SpecifiedOperatorII         ::= ADD
                                {:

                                :}
                            |   SUBTRACT
                                {:

                                :}
                            |   OR
                                {:

                                :}
                            ;
Term                        ::= Factor FactorSequence
                                {:

                                :}
                            ;
FactorSequence              ::= SpecifiedOperatorIII Factor FactorSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
SpecifiedOperatorIII        ::= MULTIPLY
                                {:

                                :}
                            |   DIVIDE
                                {:

                                :}
                            |   MOD
                                {:

                                :}
                            |   AND
                                {:

                                :}
                            ;
Factor                      ::= IDENTIFIER Selector
                                {:

                                :}
                            |   Number
                                {:

                                :}
                            |   LEFT_ROUND_BRACKET Expression RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   NOT Factor
                                {:

                                :}
                            ;
Number                      ::= INTEGER
                                {:

                                :}
                            ;
Selector                    ::= DOT IDENTIFIER Selector
                                {:

                                :}
                            |   LEFT_SQUARE_BRACKET Expression RIGHT_SQUARE_BRACKET Selector
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;


