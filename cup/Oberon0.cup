package oberon_grammar;

import java.io.IOException;
import java.io.File;
import java.io.FileReader;

import java_cup.runtime.Symbol;

action code
{:

:};

parser code
{:
    private Oberon0Lexer lexer;
    private File file;
    public Parser(File file) {
        this();
        this.file = file;
        try {
            lexer = new Oberon0Lexer(new FileReader(file));
        } catch (IOException exception) {
            throw new RuntimeException("Unable to open file \"" + file + "\"");
        }
    }
:};

scan with
{:
    Symbol symbol = lexer.yylex();
    return symbol != null ? symbol : new Symbol(SymbolConstants.EOF);
:};


terminal MODULE, BEGIN, END, CONST, TYPE, VAR, PROCEDURE, ARRAY, OF, RECORD;
terminal WHILE, DO, IF, THEN, ELSIF, ELSE;
terminal SEMICOLON, COMMA;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD;
terminal AND, OR, NOT;
terminal EQUAL, NOT_EQUAL, LESS, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL;
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal ASSIGN;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, DOT, COLON;
terminal String IDENTIFIER;
terminal String INTEGER;

non terminal module;                        // ok
non terminal moduleBeginSection;            // ok
non terminal statementSequence;             // ok
non terminal declarations;                  // ok
non terminal constDeclaration;              // ok
non terminal constIdentifierDeclaration;    // ok
non terminal typeDeclaration;               // ok
non terminal typeIdentifierDeclaration;     // ok
non terminal varDeclaration;                // ok
non terminal varIdentifierDeclaration;      // ok
non terminal procedureDeclarations;         // ok
non terminal procedureDeclaration;          // ok
non terminal expression;                    // ok
non terminal type;                          // ok
non terminal identifierList;                // ok
non terminal procedureHeading;              // ok
non terminal procedureBody;                 // ok
non terminal formalParameters;              // ok
non terminal procedureBodyBeginSection;     // ok
non terminal wrappedFormalParameters;       // ok
non terminal formalParameterSections;       // ok
non terminal formalParameterSection;        // ok
non terminal arrayType;                     // ok
non terminal recordType;                    // ok
non terminal fieldLists;                    // ok
non terminal fieldList;                     // ok
non terminal identifiers;                   // ok
non terminal statement;                     // ok
non terminal statements;                    // ok
non terminal assignment;                    // ok
non terminal procedureCall;                 // ok
non terminal ifStatement;                   // ok
non terminal whileStatement;                // ok
non terminal elseIfStatement;               // ok
non terminal elseStatement;                 // ok
non terminal actualParameters;              // ok
non terminal expressionList;                // ok
non terminal expressions;                   // ok
non terminal selector;                      // ok
non terminal simpleExpression;              // ok
non terminal comparingSimpleExpression;     // ok
non terminal comparisonOperator;            // ok
non terminal term;                          // ok
non terminal specifiedOperatorI;            // ok
non terminal termSequence;                  // ok
non terminal specifiedOperatorII;           // ok
non terminal factor;                        // ok
non terminal factorSequence;                // ok
non terminal specifiedOperatorIII;          // ok
non terminal number;                        // ok


start with module;


module                      ::= MODULE IDENTIFIER:id1 SEMICOLON declarations
                                moduleBeginSection
                                END IDENTIFIER:id2 DOT
                                {:

                                :}
                            ;
moduleBeginSection          ::= BEGIN statementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
declarations                ::= constDeclaration
                                typeDeclaration
                                varDeclaration
                                procedureDeclarations
                                {:

                                :}
                            ;
constDeclaration            ::= CONST constIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
constIdentifierDeclaration  ::= IDENTIFIER EQUAL expression SEMICOLON constIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
typeDeclaration             ::= TYPE typeIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
typeIdentifierDeclaration   ::= IDENTIFIER EQUAL type SEMICOLON typeIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
varDeclaration              ::= VAR varIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
varIdentifierDeclaration    ::= identifierList COLON type SEMICOLON varIdentifierDeclaration
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
procedureDeclarations       ::= procedureDeclaration SEMICOLON procedureDeclarations
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
procedureDeclaration        ::= procedureHeading SEMICOLON procedureBody
                                {:

                                :}
                            ;
procedureHeading            ::= PROCEDURE IDENTIFIER wrappedFormalParameters
                                {:

                                :}
                            ;
procedureBody               ::= declarations
                                procedureBodyBeginSection
                                END IDENTIFIER
                                {:

                                :}
                            ;
procedureBodyBeginSection   ::= BEGIN statementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
wrappedFormalParameters     ::= LEFT_ROUND_BRACKET formalParameters RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameters            ::= formalParameterSection formalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameterSections     ::= SEMICOLON formalParameterSection formalParameterSections
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
formalParameterSection      ::= identifierList COLON type
                                {:

                                :}
                            |   VAR identifierList COLON type
                                {:

                                :}
                            ;
type                        ::= IDENTIFIER
                                {:

                                :}
                            |   arrayType
                                {:

                                :}
                            |   recordType
                                {:

                                :}
                            ;
recordType                  ::= RECORD fieldList fieldLists END
                                {:

                                :}
                            ;
fieldLists                  ::= SEMICOLON fieldList fieldLists
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
fieldList                   ::= identifierList COLON type
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
arrayType                   ::= ARRAY expression OF type
                                {:

                                :}
                            ;
identifierList              ::= IDENTIFIER identifiers
                                {:

                                :}
                            ;
identifiers                 ::= COMMA IDENTIFIER identifiers
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
statementSequence           ::= statement statements
                                {:

                                :}
                            ;
statements                  ::= SEMICOLON statement statements
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
statement                   ::= assignment statement
                                {:

                                :}
                            |   procedureCall statement
                                {:

                                :}
                            |   ifStatement statement
                                {:

                                :}
                            |   whileStatement statement
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
whileStatement              ::= WHILE expression DO statementSequence END
                                {:

                                :}
                            ;
ifStatement                 ::= IF expression THEN statementSequence
                                elseIfStatement
                                elseStatement
                                END
                                {:

                                :}
                            ;
elseIfStatement             ::= ELSIF expression THEN statementSequence elseIfStatement
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
elseStatement               ::= ELSE statementSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
procedureCall               ::= IDENTIFIER actualParameters
                                {:

                                :}
                            ;
actualParameters            ::= LEFT_ROUND_BRACKET expressionList RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
expressionList              ::= expression expressions
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
expressions                 ::= COMMA expression expressions
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
assignment                  ::= IDENTIFIER selector ASSIGN expression
                                {:

                                :}
                            ;
expression                  ::= simpleExpression comparingSimpleExpression
                                {:

                                :}
                            ;
comparingSimpleExpression   ::= comparisonOperator simpleExpression
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
comparisonOperator          ::= EQUAL
                                {:

                                :}
                            |   NOT_EQUAL
                                {:

                                :}
                            |   LESS
                                {:

                                :}
                            |   LESS_OR_EQUAL
                                {:

                                :}
                            |   GREATER
                                {:

                                :}
                            |   GREATER_OR_EQUAL
                                {:

                                :}
                            ;
simpleExpression            ::= specifiedOperatorI term termSequence
                                {:

                                :}
                            ;
termSequence                ::= specifiedOperatorII term termSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
specifiedOperatorI          ::= ADD
                                {:

                                :}
                            |   SUBTRACT
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
specifiedOperatorII         ::= ADD
                                {:

                                :}
                            |   SUBTRACT
                                {:

                                :}
                            |   OR
                                {:

                                :}
                            ;
term                        ::= factor factorSequence
                                {:

                                :}
                            ;
factorSequence              ::= specifiedOperatorIII factor factorSequence
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;
specifiedOperatorIII        ::= MULTIPLY
                                {:

                                :}
                            |   DIVIDE
                                {:

                                :}
                            |   MOD
                                {:

                                :}
                            |   AND
                                {:

                                :}
                            ;
factor                      ::= IDENTIFIER selector
                                {:

                                :}
                            |   number
                                {:

                                :}
                            |   LEFT_ROUND_BRACKET expression RIGHT_ROUND_BRACKET
                                {:

                                :}
                            |   NOT factor
                                {:

                                :}
                            ;
number                      ::= INTEGER
                                {:

                                :}
                            ;
selector                    ::= DOT IDENTIFIER selector
                                {:

                                :}
                            |   LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET selector
                                {:

                                :}
                            |   // empty
                                {:

                                :}
                            ;


