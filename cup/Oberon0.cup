package grammar;

import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import java.util.Deque;
import java.util.ArrayDeque;
import java.util.List;
import java.util.ArrayList;

import java_cup.runtime.Symbol;

import type.*;
import exception.parser.*;

action code
{:
    List<ParserException> exceptions = new ArrayList<>();
:};

parser code
{:
    private Lexer lexer;
    private File file;
    public Parser(File file) {
        this();
        this.file = file;
        try {
            lexer = new Lexer(new FileReader(file));
        } catch (IOException exception) {
            throw new RuntimeException("Unable to open file \"" + file + "\"");
        }
    }
:};

scan with
{:
    Symbol symbol = lexer.yylex();
    return symbol != null ? symbol : new Symbol(SymbolConstants.EOF);
:};


terminal MODULE, BEGIN, END, CONST, TYPE, VAR, PROCEDURE, ARRAY, OF, RECORD;
terminal WHILE, DO, IF, THEN, ELSIF, ELSE;
terminal SEMICOLON, COMMA;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MOD;
terminal AND, OR, NOT;
terminal EQUAL, NOT_EQUAL, LESS, LESS_OR_EQUAL, GREATER, GREATER_OR_EQUAL;
terminal LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal ASSIGN;
terminal LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, DOT, COLON;
terminal String IDENTIFIER;
terminal String INTEGER;

non terminal ModuleNode                             Module;
non terminal StatementSequenceNode                  ModuleBeginSection;
non terminal StatementSequenceNode                  StatementSequence;
non terminal DeclarationsNode                       Declarations;
non terminal ConstDeclarationNode                   ConstDeclaration;
non terminal Deque<ConstDeclarationUnitNode>        ConstIdentifierDeclaration;
non terminal TypeDeclarationNode                    TypeDeclaration;
non terminal Deque<TypeDeclarationUnitNode>         TypeIdentifierDeclaration;
non terminal VarDeclarationNode                     VarDeclaration;
non terminal Deque<VarDeclarationUnitNode>          VarIdentifierDeclaration;
non terminal Deque<ProcedureDeclarationNode>        ProcedureDeclarations;
non terminal ProcedureDeclarationNode               ProcedureDeclaration;
non terminal ExpressionNode                         Expression;
non terminal TypeNode                               Type;
non terminal IdentifierListNode                     IdentifierList;
non terminal ProcedureHeadingNode                   ProcedureHeading;
non terminal ProcedureBodyNode                      ProcedureBody;
non terminal FormalParametersNode                   FormalParameters;
non terminal StatementSequenceNode                  ProcedureBodyBeginSection;
non terminal FormalParametersNode                   WrappedFormalParameters;
non terminal Deque<FormalParameterSectionNode>      FormalParameterSections;
non terminal FormalParameterSectionNode             FormalParameterSection;
non terminal ArrayTypeNode                          ArrayType;
non terminal RecordTypeNode                         RecordType;
non terminal Deque<FieldListNode>                   FieldLists;
non terminal FieldListNode                          FieldList;
non terminal IdentifierListNode                     Identifiers;
non terminal StatementNode                          Statement;
non terminal StatementSequenceNode                  Statements;
non terminal AssignmentNode                         Assignment;
non terminal ProcedureCallNode                      ProcedureCall;
non terminal IfStatementNode                        IfStatement;
non terminal WhileStatementNode                     WhileStatement;
non terminal Deque<ConditionalStatementUnitNode>    ElseIfStatement;
non terminal StatementSequenceNode                  ElseStatement;
non terminal ActualParametersNode                   ActualParameters;
non terminal ExpressionsNode                        ExpressionList;
non terminal ExpressionsNode                        Expressions;
non terminal SelectorNode                           Selector;
non terminal SimpleExpressionNode                   SimpleExpression;
non terminal ComparingSimpleExpressionNode          ComparingSimpleExpression;
non terminal Operator                               ComparisonOperator;
non terminal TermNode                               Term;
non terminal Operator                               SpecifiedOperatorI;
non terminal Deque<OperatedTermNode>                TermSequence;
non terminal Operator                               SpecifiedOperatorII;
non terminal FactorNode                             Factor;
non terminal Deque<OperatedFactorNode>              FactorSequence;
non terminal Operator                               SpecifiedOperatorIII;
non terminal NumberNode                             Number;


start with Module;


Module                      ::= MODULE IDENTIFIER:beginIdentifier SEMICOLON Declarations:declarations
                                ModuleBeginSection:moduleBeginSection
                                END IDENTIFIER:endIdentifier DOT
                                {:
                                    if (!beginIdentifier.equals(endIdentifier)) {
                                        exceptions.add(
                                            new InconsistentIdentifierException(
                                            "Inconsistent module name <" + beginIdentifier + "> and <"
                                            + endIdentifier + ">"));
                                    }
                                    if (moduleBeginSection == null) {
                                        moduleBeginSection = new StatementSequenceNode();
                                    }
                                    RESULT = new ModuleNode(
                                        new IdentifierNode(beginIdentifier),
                                        declarations,
                                        moduleBeginSection,
                                        new IdentifierNode(endIdentifier)
                                    );
                                    for (ParserException e : exceptions) {
                                        e.printStackTrace();
                                    }
                                :}
                            ;
ModuleBeginSection          ::= BEGIN StatementSequence:statementSequence
                                {:
                                    RESULT = statementSequence;
                                :}
                            |   // empty
                            ;
Declarations                ::= ConstDeclaration:constDeclaration
                                TypeDeclaration:typeDeclaration
                                VarDeclaration:varDeclaration
                                ProcedureDeclarations:procedureDeclarations
                                {:
                                    // constDeclaration is nullable
                                    // typeDeclaration is nullable
                                    // varDeclaration is nullable
                                    // procedureDeclarations is nullable

                                    if (constDeclaration == null) {
                                        constDeclaration = new ConstDeclarationNode();
                                    }
                                    if (typeDeclaration == null) {
                                        typeDeclaration = new TypeDeclarationNode();
                                    }
                                    if (varDeclaration == null) {
                                        varDeclaration = new VarDeclarationNode();
                                    }
                                    if (procedureDeclarations == null) {
                                        procedureDeclarations = new ArrayDeque<ProcedureDeclarationNode>();
                                    }
                                    RESULT = new DeclarationsNode(
                                        constDeclaration, typeDeclaration, varDeclaration, procedureDeclarations);
                                :}
                            ;
ConstDeclaration            ::= CONST ConstIdentifierDeclaration:constIdentifierDeclaration
                                {:
                                    if (constIdentifierDeclaration == null) {
                                        constIdentifierDeclaration = new ArrayDeque<ConstDeclarationUnitNode>();
                                    }
                                    RESULT = new ConstDeclarationNode(constIdentifierDeclaration);
                                :}
                            |   // empty
                            ;
ConstIdentifierDeclaration  ::= IDENTIFIER:identifier EQUAL Expression:expression
                                SEMICOLON ConstIdentifierDeclaration:constIdentifierDeclaration
                                {:
                                    if (constIdentifierDeclaration == null) {
                                        constIdentifierDeclaration = new ArrayDeque<ConstDeclarationUnitNode>();
                                    }
                                    constIdentifierDeclaration.addFirst(
                                        new ConstDeclarationUnitNode(new IdentifierNode(identifier), expression));
                                    RESULT = constIdentifierDeclaration;
                                :}
                            |   // empty
                            ;
TypeDeclaration             ::= TYPE TypeIdentifierDeclaration:typeIdentifierDeclaration
                                {:
                                    if (typeIdentifierDeclaration == null) {
                                        typeIdentifierDeclaration = new ArrayDeque<TypeDeclarationUnitNode>();
                                    }
                                    RESULT = new TypeDeclarationNode(typeIdentifierDeclaration);
                                :}
                            |   // empty
                            ;
TypeIdentifierDeclaration   ::= IDENTIFIER:identifier EQUAL Type:type SEMICOLON
                                TypeIdentifierDeclaration:typeIdentifierDeclaration
                                {:
                                    if (typeIdentifierDeclaration == null) {
                                        typeIdentifierDeclaration = new ArrayDeque<TypeDeclarationUnitNode>();
                                    }
                                    typeIdentifierDeclaration.addFirst(new TypeDeclarationUnitNode(
                                        new IdentifierNode(identifier), type));
                                    RESULT = typeIdentifierDeclaration;
                                :}
                            |   // empty
                            ;
VarDeclaration              ::= VAR VarIdentifierDeclaration:varIdentifierDeclaration
                                {:
                                    if (varIdentifierDeclaration == null) {
                                        varIdentifierDeclaration = new ArrayDeque<VarDeclarationUnitNode>();
                                    }
                                    RESULT = new VarDeclarationNode(varIdentifierDeclaration);
                                :}
                            |   // empty
                            ;
VarIdentifierDeclaration    ::= IdentifierList:identifierList COLON Type:type SEMICOLON
                                VarIdentifierDeclaration:varIdentifierDeclaration
                                {:
                                    if (varIdentifierDeclaration == null) {
                                        varIdentifierDeclaration = new ArrayDeque<VarDeclarationUnitNode>();
                                    }
                                    varIdentifierDeclaration.addFirst(new VarDeclarationUnitNode(identifierList, type));
                                    RESULT = varIdentifierDeclaration;
                                :}
                            |   // empty
                            ;
ProcedureDeclarations       ::= ProcedureDeclaration:procedureDeclaration
                                SEMICOLON
                                ProcedureDeclarations:procedureDeclarations
                                {:
                                    if (procedureDeclarations == null) {
                                        procedureDeclarations = new ArrayDeque<ProcedureDeclarationNode>();
                                    }
                                    procedureDeclarations.addFirst(procedureDeclaration);
                                    RESULT = procedureDeclarations;
                                :}
                            |   // empty
                            ;
ProcedureDeclaration        ::= ProcedureHeading:procedureHeading SEMICOLON ProcedureBody:procedureBody
                                {:
                                    String beginIdentifier = procedureHeading.identifierNode.identifier;
                                    String endIdentifier = procedureBody.endIdentifierNode.identifier;
                                    if (!beginIdentifier.equals(endIdentifier)) {
                                        exceptions.add(
                                            new InconsistentIdentifierException(
                                            "Inconsistent procedure name <" + beginIdentifier + "> and <"
                                            + endIdentifier + ">"));
                                    }
                                    RESULT = new ProcedureDeclarationNode(procedureHeading, procedureBody);
                                :}
                            ;
ProcedureHeading            ::= PROCEDURE IDENTIFIER:identifier WrappedFormalParameters:wrappedFormalParameters
                                {:
                                    if (wrappedFormalParameters == null) {
                                        wrappedFormalParameters = new FormalParametersNode();
                                    }
                                    RESULT = new ProcedureHeadingNode(
                                        new IdentifierNode(identifier), wrappedFormalParameters);
                                :}
                            ;
ProcedureBody               ::= Declarations:declarations
                                ProcedureBodyBeginSection:procedureBodyBeginSection
                                END IDENTIFIER:identifier
                                {:
                                    if (procedureBodyBeginSection == null) {
                                        procedureBodyBeginSection = new StatementSequenceNode();
                                    }
                                    RESULT = new ProcedureBodyNode(
                                        declarations, procedureBodyBeginSection, new IdentifierNode(identifier));
                                :}
                            ;
ProcedureBodyBeginSection   ::= BEGIN StatementSequence:statementSequenceNode
                                {:
                                    RESULT = statementSequenceNode;
                                :}
                            |   // empty
                            ;
WrappedFormalParameters     ::= LEFT_ROUND_BRACKET FormalParameters:formalParameters RIGHT_ROUND_BRACKET
                                {:
                                    if (formalParameters == null) {
                                        formalParameters = new FormalParametersNode();
                                    }
                                    RESULT = formalParameters;
                                :}
                            |   // empty
                            ;
FormalParameters            ::= FormalParameterSection:formalParameterSection
                                FormalParameterSections:formalParameterSections
                                {:
                                    if (formalParameterSections == null) {
                                        formalParameterSections = new ArrayDeque<FormalParameterSectionNode>();
                                    }
                                    formalParameterSections.addFirst(formalParameterSection);
                                    RESULT = new FormalParametersNode(formalParameterSections);
                                :}
                            |   // empty
                            ;
FormalParameterSections     ::= SEMICOLON
                                FormalParameterSection:formalParameterSection
                                FormalParameterSections:formalParameterSections
                                {:
                                    if (formalParameterSections == null) {
                                        formalParameterSections = new ArrayDeque<FormalParameterSectionNode>();
                                    }
                                    formalParameterSections.addFirst(formalParameterSection);
                                    RESULT = formalParameterSections;
                                :}
                            |   // empty
                            ;
FormalParameterSection      ::= IdentifierList:identifierList COLON Type:type
                                {:
                                    RESULT = new FormalParameterSectionNode(false, identifierList, type);
                                :}
                            |   VAR IdentifierList:identifierList COLON Type:type
                                {:
                                    RESULT = new FormalParameterSectionNode(true, identifierList, type);
                                :}
                            ;
Type                        ::= IDENTIFIER:identifier
                                {:
                                    RESULT = new IdentifierTypeNode(new IdentifierNode(identifier));
                                :}
                            |   ArrayType:arrayType
                                {:
                                    RESULT = arrayType;
                                :}
                            |   RecordType:recordType
                                {:
                                    RESULT = recordType;
                                :}
                            ;
RecordType                  ::= RECORD FieldList:fieldList FieldLists:fieldLists END
                                {:
                                    if (fieldLists == null) {
                                        fieldLists = new ArrayDeque<FieldListNode>();
                                    }
                                    if (fieldList != null) {
                                        fieldLists.addFirst(fieldList);
                                    }
                                    RESULT = new RecordTypeNode(fieldLists);
                                :}
                            ;
FieldLists                  ::= SEMICOLON FieldList:fieldList FieldLists:fieldLists
                                {:
                                    if (fieldLists == null) {
                                        fieldLists = new ArrayDeque<FieldListNode>();
                                    }
                                    if (fieldList != null) {
                                        fieldLists.addFirst(fieldList);
                                    }
                                    RESULT = fieldLists;
                                :}
                            |   // empty
                            ;
FieldList                   ::= IdentifierList:identifierList COLON Type:type
                                {:
                                    RESULT = new FieldListNode(identifierList, type);
                                :}
                            |   // empty
                            ;
ArrayType                   ::= ARRAY Expression:expression OF Type:type
                                {:
                                    RESULT = new ArrayTypeNode(expression, type);
                                :}
                            ;
IdentifierList              ::= IDENTIFIER:identifier Identifiers:identifiers
                                {:
                                    if (identifiers == null) {
                                        identifiers = new IdentifierListNode();
                                    }
                                    identifiers.addFirst(new IdentifierNode(identifier));
                                    RESULT = identifiers;
                                :}
                            ;
Identifiers                 ::= COMMA IDENTIFIER:identifier Identifiers:identifiers
                                {:
                                    if (identifiers == null) {
                                        identifiers = new IdentifierListNode();
                                    }
                                    identifiers.addFirst(new IdentifierNode(identifier));
                                    RESULT = identifiers;
                                :}
                            |   // empty
                            ;
StatementSequence           ::= Statement:statement Statements:statements
                                {:
                                    if (statements == null) {
                                        statements = new StatementSequenceNode();
                                    }
                                    statements.addFirst(statement);
                                    RESULT = statements;
                                :}
                            ;
Statements                  ::= SEMICOLON Statement:statement Statements:statements
                                {:
                                    if (statements == null) {
                                        statements = new StatementSequenceNode();
                                    }
                                    statements.addFirst(statement);
                                    RESULT = statements;
                                :}
                            |   // empty
                            ;
Statement                   ::= Assignment:assignment
                                {:
                                    RESULT = assignment;
                                :}
                            |   ProcedureCall:procedureCall
                                {:
                                    RESULT = procedureCall;
                                :}
                            |   IfStatement:ifStatement
                                {:
                                    RESULT = ifStatement;
                                :}
                            |   WhileStatement:whileStatement
                                {:
                                    RESULT = whileStatement;
                                :}
                            |   // empty
                                {:
                                    RESULT = new NullStatementNode();
                                :}
                            ;
WhileStatement              ::= WHILE Expression:expression DO StatementSequence:statementSequence END
                                {:
                                    RESULT = new WhileStatementNode(expression, statementSequence);
                                :}
                            ;
IfStatement                 ::= IF Expression:ifExpression THEN StatementSequence:ifStatementSequence
                                ElseIfStatement:elseIfStatement
                                ElseStatement:elseStatement
                                END
                                {:
                                    // elseIfStatement is nullable
                                    // elseStatement is nullable
                                    if (elseIfStatement == null) {
                                        elseIfStatement = new ArrayDeque<ConditionalStatementUnitNode>();
                                    }
                                    if (elseStatement == null) {
                                        elseStatement = new StatementSequenceNode();
                                    }
                                    RESULT = new IfStatementNode(
                                        new ConditionalStatementUnitNode(ifExpression, ifStatementSequence),
                                        elseIfStatement,
                                        elseStatement
                                    );
                                :}
                            ;
ElseIfStatement             ::= ELSIF Expression:expression THEN StatementSequence:statementSequence
                                ElseIfStatement:elseIfStatement
                                {:
                                    if (elseIfStatement == null) {
                                        elseIfStatement = new ArrayDeque<ConditionalStatementUnitNode>();
                                    }
                                    elseIfStatement.addFirst(
                                        new ConditionalStatementUnitNode(expression, statementSequence));
                                    RESULT = elseIfStatement;
                                :}
                            |   // empty
                            ;
ElseStatement               ::= ELSE StatementSequence:statementSequence
                                {:
                                    RESULT = statementSequence;
                                :}
                            |   // empty
                            ;
ProcedureCall               ::= IDENTIFIER:identifier ActualParameters:actualParameters
                                {:
                                    RESULT = new ProcedureCallNode(new IdentifierNode(identifier), actualParameters);
                                :}
                            ;
ActualParameters            ::= LEFT_ROUND_BRACKET ExpressionList:expressions RIGHT_ROUND_BRACKET
                                {:
                                    if (expressions == null) {
                                        expressions = new ActualParametersNode();
                                    }
                                    RESULT = new ActualParametersNode(expressions);
                                :}
                            ;
ExpressionList              ::= Expression:expression Expressions:expressions
                                {:
                                    if (expressions == null) {
                                        expressions = new ExpressionsNode();
                                    }
                                    expressions.addFirst(expression);
                                    RESULT = expressions;
                                :}
                            |   // empty
                            ;
Expressions                 ::= COMMA Expression:expression Expressions:expressions
                                {:
                                    if (expressions == null) {
                                        expressions = new ExpressionsNode();
                                    }
                                    expressions.addFirst(expression);
                                    RESULT = expressions;
                                :}
                            |   // empty
                            ;
Assignment                  ::= IDENTIFIER:identifier Selector:selector ASSIGN Expression:expression
                                {:
                                    if (selector == null) {
                                        selector = new SelectorNode();
                                    }
                                    RESULT = new AssignmentNode(
                                        new SelectedIdentifierNode(
                                            new IdentifierNode(identifier),
                                            selector),
                                        expression);
                                :}
                            ;
Expression                  ::= SimpleExpression:simpleExpression ComparingSimpleExpression:comparingSimpleExpression
                                {:
                                    // comparingSimpleExpression can be null
                                    if (comparingSimpleExpression == null) {
                                        RESULT = new ExpressionNode(simpleExpression);
                                    } else {
                                        RESULT = new ExpressionNode(simpleExpression,
                                                                    comparingSimpleExpression.operator,
                                                                    comparingSimpleExpression.simpleExpressionNode);
                                    }
                                :}
                            ;
ComparingSimpleExpression   ::= ComparisonOperator:operator SimpleExpression:simpleExpression
                                {:
                                    RESULT = new ComparingSimpleExpressionNode(operator, simpleExpression);
                                :}
                            |   // empty
                            ;
ComparisonOperator          ::= EQUAL
                                {:
                                    RESULT = Operator.EQUAL;
                                :}
                            |   NOT_EQUAL
                                {:
                                    RESULT = Operator.NOT_EQUAL;
                                :}
                            |   LESS
                                {:
                                    RESULT = Operator.LESS;
                                :}
                            |   LESS_OR_EQUAL
                                {:
                                    RESULT = Operator.LESS_OR_EQUAL;
                                :}
                            |   GREATER
                                {:
                                    RESULT = Operator.GREATER;
                                :}
                            |   GREATER_OR_EQUAL
                                {:
                                    RESULT = Operator.GREATER_OR_EQUAL;
                                :}
                            ;
SimpleExpression            ::= SpecifiedOperatorI:operator Term:term TermSequence:termSequence
                                {:
                                    if (termSequence == null) {
                                        termSequence = new ArrayDeque<OperatedTermNode>();
                                    }
                                    RESULT = new SimpleExpressionNode(operator, term, termSequence);
                                :}
                            ;
TermSequence                ::= SpecifiedOperatorII:operator Term:term TermSequence:termSequence
                                {:
                                    if (termSequence == null) {
                                        termSequence = new ArrayDeque<OperatedTermNode>();
                                    }
                                    termSequence.addFirst(new OperatedTermNode(operator, term));
                                    RESULT = termSequence;
                                :}
                            |   // empty
                            ;
SpecifiedOperatorI          ::= ADD
                                {:
                                    RESULT = Operator.ADD;
                                :}
                            |   SUBTRACT
                                {:
                                    RESULT = Operator.SUBTRACT;
                                :}
                            |   // empty
                                {:
                                    RESULT = Operator.NONE;
                                :}
                            ;
SpecifiedOperatorII         ::= ADD
                                {:
                                    RESULT = Operator.ADD;
                                :}
                            |   SUBTRACT
                                {:
                                    RESULT = Operator.SUBTRACT;
                                :}
                            |   OR
                                {:
                                    RESULT = Operator.OR;
                                :}
                            ;
Term                        ::= Factor:factor FactorSequence:factorSequence
                                {:
                                    if (factorSequence == null) {
                                        factorSequence = new ArrayDeque<OperatedFactorNode>();
                                    }
                                    RESULT = new TermNode(factor, factorSequence);
                                :}
                            ;
FactorSequence              ::= SpecifiedOperatorIII:operator Factor:factor FactorSequence:factorSequence
                                {:
                                    if (factorSequence == null) {
                                        factorSequence = new ArrayDeque<OperatedFactorNode>();
                                    }
                                    factorSequence.addFirst(new OperatedFactorNode(operator, factor));
                                    RESULT = factorSequence;
                                :}
                            |   Factor:factor FactorSequence:factorSequence
                                {:
                                    exceptions.add(
                                        new ElementMissingException("Missing operator before factor <" + factor + ">"));
                                    if (factorSequence == null) {
                                        factorSequence = new ArrayDeque<OperatedFactorNode>();
                                    }
                                    factorSequence.addFirst(new OperatedFactorNode(Operator.NONE, factor));
                                    RESULT = factorSequence;
                                :}
                            |   // empty
                            ;
SpecifiedOperatorIII        ::= MULTIPLY
                                {:
                                    RESULT = Operator.MULTIPLY;
                                :}
                            |   DIVIDE
                                {:
                                    RESULT = Operator.DIVIDE;
                                :}
                            |   MOD
                                {:
                                    RESULT = Operator.MOD;
                                :}
                            |   AND
                                {:
                                    RESULT = Operator.AND;
                                :}
                            ;
Factor                      ::= IDENTIFIER:identifier Selector:selector
                                {:
                                    // selector is nullable
                                    if (selector == null) {
                                        selector = new SelectorNode();
                                    }
                                    RESULT = new SelectedIdentifierNode(new IdentifierNode(identifier), selector);
                                :}
                            |   Number:number
                                {:
                                    RESULT = number;
                                :}
                            |   LEFT_ROUND_BRACKET Expression:expression RIGHT_ROUND_BRACKET
                                {:
                                    RESULT = new PrioritizedExpressionNode(expression);
                                :}
                            |   NOT Factor:factor
                                {:
                                    RESULT = new NegatedFactorNode(factor);
                                :}
                            ;
Number                      ::= INTEGER:integer
                                {:
                                    RESULT = new NumberNode(Integer.parseInt(integer));
                                :}
                            ;
Selector                    ::= DOT IDENTIFIER:identifier Selector:selector
                                {:
                                    if (selector == null) {
                                        selector = new SelectorNode();
                                    }
                                    selector.addFirst(new RecordSelectorUnitNode(new IdentifierNode(identifier)));
                                    RESULT = selector;
                                :}
                            |   LEFT_SQUARE_BRACKET Expression:expression RIGHT_SQUARE_BRACKET Selector:selector
                                {:
                                    if (selector == null) {
                                        selector = new SelectorNode();
                                    }
                                    selector.addFirst(new ArraySelectorUnitNode(expression));
                                    RESULT = selector;
                                :}
                            |   // empty
                            ;


